@page "/manage-repertoires/{IdCinema:int}/{CinemaName}"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IAlertService AlertService
@inject IStringLocalizer<Resources.ManageRepertoires.ManageRepertoires> Localizer
@inject ITokensRefreshHandler TokensRefreshHandler

<MudContainer Class="d-flex justify-center">
    <MudStack>
        <MudText Align="Align.Center" Typo="Typo.h4">@Localizer["Manage Repertoires for"] @CinemaName</MudText>
        @if (_repertoires == null)
        {
            <div class="d-flex justify-center">
                <MudProgressCircular Indeterminate="true" />
            </div>
        }
        else if (_repertoires.Count() == 0)
        {
            <div class="d-flex justify-center">
                <MudAlert Elevation="20" Severity="Severity.Info">@Localizer["No repertoires"]</MudAlert>
            </div>
        }
        else
        {
            <MudTable Style="min-width: 800px;" @ref="@_table" Items="@_repertoires" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>@Localizer["Day"]</MudTh>
                    <MudTh>@Localizer["Day Number"]</MudTh>
                    <MudTh>@Localizer["Month"]</MudTh>
                    <MudTh>@Localizer["Year"]</MudTh>
                    <MudTh>@Localizer["Actions"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@Localizer["Day"]">@context.Date.ToLongDateString().Split(',')[0].Trim()</MudTd>
                    <MudTd DataLabel="@Localizer["Day Number"]">@context.Date.Day</MudTd>
                    <MudTd DataLabel="@Localizer["Month"]">@context.Date.Month</MudTd>
                    <MudTd DataLabel="@Localizer["Year"]">@context.Date.Year</MudTd>
                    <MudTd DataLabel="@Localizer["Actions"]">
                        <MudButton Style="background-color: #2196F3; color: white;" @onclick="@(() => OpenUpdateRepertoireDialog(context.IdRepertoire))">@Localizer["Update"]</MudButton>
                        <MudButton Style="background-color: red; color: white;" @onclick=@(() => DeleteRepertoireAsync(context.IdRepertoire))>@Localizer["Delete"]</MudButton>
                        <MudButton Style="background-color: #2196F3; color: white;" @onclick=@(() => ManageMoviesRepertoire(context.IdRepertoire))>@Localizer["Manage movies' repertoire"]</MudButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <div class="d-flex justify-center">
                        <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
                    </div>
                </PagerContent>
                </MudTable>
        }
        <MudButton Style="background-color: #2196F3; color: white;" @onclick ="OpenAddRepertoireDialog">@Localizer["Add repertoire"]</MudButton>
    </MudStack>
</MudContainer>

<MudDialog @bind-IsVisible="_isUpdateRepertoireDialogVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> @Localizer["Update repertoire"]
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudDatePicker Label="@Localizer["Date of repertoire"]" @bind-Date="_currentUpdateRepertoire.Date" For="@(() => _currentUpdateRepertoire.Date)" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateRepertoireAsync" Class="px-10">@Localizer["Save"]</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="_isAddRepertoireDialogVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> @Localizer["Add repertoire"]
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudDatePicker Label="@Localizer["Date of repertoire"]" @bind-Date="_currentAddRepertoire.Date" For="@(() => _currentAddRepertoire.Date)" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddRepertoireAsync" Class="px-10">@Localizer["Save"]</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Parameter]
    public int IdCinema { get; set; }
    [Parameter]
    public string CinemaName { get; set; }
    private bool _isUpdateRepertoireDialogVisible = false;
    private bool _isAddRepertoireDialogVisible = false;
    private DialogOptions _dialogOptions = new() { FullWidth = true };
    private MudTable<GetRepertoireDTO> _table;
    private IEnumerable<GetRepertoireDTO>? _repertoires;
    private AddRepertoireDTO _currentAddRepertoire = new AddRepertoireDTO();
    private UpdateRepertoireDTO _currentUpdateRepertoire = new UpdateRepertoireDTO();
    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
    protected override async Task OnInitializedAsync()
    {
        await GetRepertoiresAsync();
    }

    private async Task GetRepertoiresAsync()
    {
        await TokensRefreshHandler.RefreshTokensAsync();
        _repertoires = await HttpClient.GetFromJsonAsync<List<GetRepertoireDTO>>($"api/repertoires/{IdCinema}");
    }

    private void OpenAddRepertoireDialog()
    {
        _isAddRepertoireDialogVisible = true;
        _currentAddRepertoire = new AddRepertoireDTO();
    }

    private void OpenUpdateRepertoireDialog(int id)
    {
        _isUpdateRepertoireDialogVisible = true;
        var repertoire = _repertoires.FirstOrDefault(x=> x.IdRepertoire == id);
        _currentUpdateRepertoire = new UpdateRepertoireDTO
        {
            IdRepertoire = repertoire.IdRepertoire,
            Date = repertoire.Date,
            IdCinema = IdCinema
        };
    }

    private async Task AddRepertoireAsync()
    {
        _currentAddRepertoire.IdCinema = IdCinema;
        await TokensRefreshHandler.RefreshTokensAsync();
        var responseHTTP = await HttpClient.PostAsJsonAsync($"/api/repertoires/{IdCinema}", _currentAddRepertoire);
        if (responseHTTP.IsSuccessStatusCode)
        {
            _isAddRepertoireDialogVisible = false;
            await GetRepertoiresAsync();
        }
        else if (responseHTTP.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            AlertService.DisplayAlert(Localizer["ConflictErrorMessage"], Severity.Error);
        }
        else
        {
            AlertService.DisplayAlert(Localizer["AddErrorMessage"], Severity.Error);
        }
    }

    private async Task UpdateRepertoireAsync()
    {
        await TokensRefreshHandler.RefreshTokensAsync();
        var responseHTTP = await HttpClient.PutAsJsonAsync($"/api/repertoires", _currentUpdateRepertoire);
        if (responseHTTP.IsSuccessStatusCode)
        {
            _isUpdateRepertoireDialogVisible = false;
            await GetRepertoiresAsync();
        }
        else if (responseHTTP.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            AlertService.DisplayAlert(Localizer["ConflictErrorMessage"], Severity.Error);
        }
        else
        {
            AlertService.DisplayAlert(Localizer["UpdateErrorMessage"], Severity.Error);
        }
    }
    private async Task DeleteRepertoireAsync(int id)
    {
        await TokensRefreshHandler.RefreshTokensAsync();
        var response = await HttpClient.DeleteAsync($"api/repertoires/{id}");
        if (response.IsSuccessStatusCode)
        {
            await GetRepertoiresAsync();
        }
        else
        {
            AlertService.DisplayAlert(Localizer["DeleteErrorMessage"], Severity.Error);
        }
    }

    private void ManageMoviesRepertoire(int id)
    {
        NavigationManager.NavigateTo($"/manage-movies-repertoire/{IdCinema}/{id}");
    }
}
