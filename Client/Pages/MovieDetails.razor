@page "/movie-details/{IdCinema:int}/{IdRepertoire:int}/{IdMovie:int}/{ShowTime}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IAlertService AlertService
@inject IStringLocalizer<Resources.MovieDetails.MovieDetails> Localizer
@inject ITokensRefreshHandler TokensRefreshHandler

@if(_movie == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudContainer>
        <MudGrid>
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Elevation="20">
                    <MudCardContent Class="justify-center">
                        <MudText Typo="Typo.h4">@_movie.Title</MudText>
                        <MudCardMedia Class="mt-2" Image="@_movie.PosterUrl" Height="400" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="8" lg="9">
                <MudCard Elevation="20">
                    <MudCardContent>
                        @if (_movie.Genres != null && _movie.Genres.Count > 0)
                        {
                            <div class="pa-2" style="border-radius: 2px; outline:1px solid #2196F3;">
                                <MudText Typo="Typo.h6">@Localizer["Genres"]</MudText>
                                <MudText Typo="Typo.body2">@string.Join(", ", _movie.Genres.Select(elem => CultureInfo.CurrentCulture.Name == "en-US" ? elem.EnglishName : elem.PolishName))</MudText>
                            </div>
                        }
                        <div class="pa-2 mt-2" style="border-radius: 2px; outline:1px solid #2196F3;">
                            <MudText Typo="Typo.h6">@Localizer["Description"]</MudText>
                            <MudText Typo="Typo.body2">@_movie.Description</MudText>
                        </div>
                        <div class="pa-2 mt-2" style="border-radius: 2px; outline:1px solid #2196F3;">
                            <MudStack Row="true" Class="align-center">
                                <MudText Typo="Typo.h6">@Localizer["Play trailer"]</MudText>
                                <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.PlayArrow" Size="Size.Medium" @onclick="() => _isTrailerDialogVisible = true" />
                            </MudStack>
                        </div>
                        <div class="pa-2 mt-2" style="border-radius: 2px; outline:1px solid #2196F3;">
                            <MudText Typo="Typo.h6">@Localizer["Show time"]</MudText>
                            <MudText Typo="Typo.body2">@TimeOnly.Parse(ShowTime) @_movie.Date.ToLongDateString()</MudText>
                        </div>
                        <div class="pa-2 mt-2" style="border-radius: 2px; outline:1px solid #2196F3;">
                            <MudText Typo="Typo.h6">@Localizer["Cinema address"]</MudText>
                            <MudText Typo="Typo.body2">@_movie.CinemaName - @_movie.CinemaAddress</MudText>
                        </div>
                        <AuthorizeView Roles="Customer">
                            <div class="d-flex justify-center pa-2 mt-2" style="border-radius: 2px; outline:1px solid #2196F3;">
                                <MudStack Row="true" Class="align-center" Spacing="5">
                                    <MudButton StartIcon="@Icons.Material.Filled.Payment" Variant="Variant.Filled" Color="Color.Primary" @onclick ="OnBuyClickAsync">@Localizer["Buy ticket"]</MudButton>
                                    <MudButton StartIcon="@Icons.Material.Filled.BookOnline" Variant="Variant.Filled" Color="Color.Primary" @onclick="OnBookClickAsync">@Localizer["Book ticket"]</MudButton>
                                </MudStack>
                            </div>
                        </AuthorizeView>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>
}
=
<MudDialog @bind-IsVisible="_isTrailerDialogVisible" Options="_dialogOptions">
    <TitleContent>@Localizer["Trailer"] @_movie?.Title</TitleContent>
    <DialogContent>
        <div style="width:900px;height:500px;">
            <iframe src="@GetVideoEmbeddedLink()" allowfullscreen></iframe>
        </div>
    </DialogContent>
</MudDialog>
@code {
    [Parameter]
    public int IdMovie { get; set; }
    [Parameter]
    public int IdRepertoire { get; set; }
    [Parameter]
    public int IdCinema { get; set; }
    [Parameter]
    public string ShowTime { get; set; }
    private bool _isTrailerDialogVisible = false;
    private DialogOptions _dialogOptions = new() { FullWidth=true, MaxWidth=MaxWidth.Medium };
    private GetMovieDetailsDTO? _movie;

    protected override async Task OnInitializedAsync()
    {
        await GetMovieDetailsAsync();
    }
    private async Task GetMovieDetailsAsync()
    {
        await TokensRefreshHandler.RefreshTokensAsync();
        _movie = await HttpClient.GetFromJsonAsync<GetMovieDetailsDTO>($"api/moviesrepertoires/details?IdCinema={IdCinema}&IdRepertoire={IdRepertoire}&IdMovie={IdMovie}&culture={CultureInfo.CurrentCulture.Name}");
    }

    private string GetVideoEmbeddedLink()
    {
        var uri = new Uri(_movie.TrailerUrl);
        var query = HttpUtility.ParseQueryString(uri.Query);
        var videoId = query["v"];
        return $"https://www.youtube.com/embed/{videoId}";
    }

    private async Task OnBuyClickAsync()
    {
        var orderDTO = new AddOrderDTO
        {
            IdMovieRepertoire = _movie.IdMovieRepertoire,
            IsPaid = true
        };
        await TokensRefreshHandler.RefreshTokensAsync();
        var response = await HttpClient.PostAsJsonAsync($"api/orders", orderDTO);
        if(response.IsSuccessStatusCode)
        {
            AlertService.DisplayAlert(Localizer["SuccessfulPurchase"], Severity.Success);
        }
        else if(response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            AlertService.DisplayAlert(Localizer["PurchaseDenied"], Severity.Error);
        }
        else
        {
            AlertService.DisplayAlert(Localizer["ErrorMessage"], Severity.Error);
        }

    }

    private async Task OnBookClickAsync()
	{
        var orderDTO = new AddOrderDTO
            {
                IdMovieRepertoire = _movie.IdMovieRepertoire,
                IsPaid = false
            };
        await TokensRefreshHandler.RefreshTokensAsync();
        var response = await HttpClient.PostAsJsonAsync($"api/orders", orderDTO);
        if (response.IsSuccessStatusCode)
        {
            AlertService.DisplayAlert(Localizer["SuccessfulReservation"], Severity.Success);
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            AlertService.DisplayAlert(Localizer["PurchaseDenied"], Severity.Error);
        }
        else
        {
            AlertService.DisplayAlert(Localizer["ErrorMessage"], Severity.Error);
        }
	}
}
