@page "/manage-movies"
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IAlertService AlertService
@inject IStringLocalizer<Resources.ManageMovies.ManageMovies> Localizer
@inject ITokensRefreshHandler TokensRefreshHandler

<MudContainer Class="d-flex justify-center" >
    <MudStack>
        <MudText Align="Align.Center" Typo="Typo.h4">@Localizer["Manage Movies"]</MudText>
        @if (_movies == null)
        {
            <div class="d-flex justify-center">
                <MudProgressCircular Indeterminate="true" />
            </div>
        }
        else if (_movies.Count() == 0)
        {
            <div class="d-flex justify-center">
                <MudAlert Elevation="20" Severity="Severity.Info">@Localizer["No movies"]</MudAlert>
            </div>
        }
        else
        {
            <MudTable Style="min-width: 800px;" @ref="@_table" Items="@_movies" RowsPerPage="4" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>@Localizer["Poster"]</MudTh>
                    <MudTh>@Localizer["Title"]</MudTh>
                    <MudTh>@Localizer["Genres"]</MudTh>
                    <MudTh>@Localizer["Actions"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@Localizer["Poster"]"><MudImage Src="@context.PosterUrl" Width="70" Height="100"></MudImage></MudTd>
                    <MudTd DataLabel="@Localizer["Title"]">@context.Title</MudTd>
                    <MudTd DataLabel="@Localizer["Genres"]">@string.Join(", ", context.Genres.Select(elem => CultureInfo.CurrentCulture.Name == "en-US" ? elem.EnglishName : elem.PolishName))</MudTd>
                    <MudTd DataLabel="@Localizer["Actions"]">
                        <MudButton Style="background-color: #2196F3; color: white;" @onclick="@(() => UpdateMovie(context.IdMovie))">@Localizer["Update"]</MudButton>
                        <MudButton Style="background-color: red; color: white;" @onclick=@(() => DeleteMovieAsync(context.IdMovie))>@Localizer["Delete"]</MudButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <div class="d-flex justify-center">
                            <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
                    </div>
                </PagerContent>
            </MudTable>
        }
        <MudButton Style="background-color: #2196F3; color: white;" @onclick="OnAddMovieClick">@Localizer["Add movie"]</MudButton>
    </MudStack>
</MudContainer>

    @code {
    private MudTable<GetMovieDTO> _table;
    private IEnumerable<GetMovieDTO>? _movies;
    private void OnAddMovieClick()
    {
        NavigationManager.NavigateTo("/add-movie");
    }
    protected override async Task OnInitializedAsync()
    {
        await GetMoviesAsync();
    }
    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
    private async Task GetMoviesAsync()
    {
        await TokensRefreshHandler.RefreshTokensAsync();
        var culture = CultureInfo.CurrentCulture.Name;
        _movies = await HttpClient.GetFromJsonAsync<List<GetMovieDTO>>($"api/movies?culture={culture}");
    }
    private async Task DeleteMovieAsync(int id)
    {
        await TokensRefreshHandler.RefreshTokensAsync();
        var response = await HttpClient.DeleteAsync($"api/movies/{id}");
        if (response.IsSuccessStatusCode)
        {
            await GetMoviesAsync();
        }
        else
        {
            AlertService.DisplayAlert(Localizer["DeleteErrorMessage"], Severity.Error);
        }
    }
    private void AddMovie()
    {
        NavigationManager.NavigateTo($"/add-movie/");
    }
    private void UpdateMovie(int id)
    {
        NavigationManager.NavigateTo($"/update-movie/{id}");
    }

   
}
