@page "/cinema-repertoire/{IdCinema:int}/{CinemaName}"
@inject HttpClient HttpClient
@inject IStringLocalizer<Resources.CinemaRepertoire.CinemaRepertoire> Localizer
@inject ITokensRefreshHandler TokensRefreshHandler

@if (_repertoires == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (_repertoires.Count == 0)
{
    <MudAlert Elevation="20" Severity="Severity.Info">@Localizer["No repertoires"]</MudAlert>
}
else
{
    <div class="d-flex flex-column">
        <MudSelect Style="max-width:200px;" T="GetRepertoireDTO" Label="@Localizer["Repertoire"]" ToStringFunc="@converter" @bind-Value="_repertoire" Variant="Variant.Filled">
            @foreach (var repertoire in _repertoires)
            {
                <MudSelectItem Value="@repertoire">@repertoire.Date.ToLongDateString()</MudSelectItem>
            }
        </MudSelect>
        
        <MudPaper Elevation="20" Class="pa-2 mb-2">
            <MudText Typo="Typo.h2">@CinemaName</MudText>
        </MudPaper>
        <Movies IdRepertoire="_repertoire.IdRepertoire" IdCinema="IdCinema"></Movies>
    </div>
}

@code {
    [Parameter]
    public int IdCinema { get; set; }
    [Parameter]
    public string CinemaName { get; set; }
    private List<GetRepertoireDTO>? _repertoires;
    private GetRepertoireDTO _repertoire = new GetRepertoireDTO();
    protected override async Task OnInitializedAsync()
    {
        await GetRepertoiresAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        await GetRepertoiresAsync();
    }
    private async Task GetRepertoiresAsync()
    {
        await TokensRefreshHandler.RefreshTokensAsync();
        _repertoires = await HttpClient.GetFromJsonAsync<List<GetRepertoireDTO>>($"api/repertoires/{IdCinema}");
        _repertoire = _repertoires.FirstOrDefault();
    }
    private Func<GetRepertoireDTO, string> converter = g => g.Date.ToLongDateString();
}
